## Enter into the correct location

$ cd ~/csp-synthesis/code/PyAsynchSynth/pycsp

## Run fdr4 to refresh license key

$ fdr4

# If license key is valid, then just close the pop-up window
# If request to refresh license key appears, follow instructions

## See the help menu for our coordination synthesis tool

$ python3 run.py -h

## We will check the solutions for each case-study one-by-one

## Runtime and the ourput coordination program/controller reported in the output may differ.
## Realizability/Unrealizability result MUST be the same.

## There are three case-study classes

======================================================================================================================
======================================================================================================================
======================================================================================================================

### Case study 7.2.1. Illustrative Examples from Section 2. Results for comparison are in Table 1.

##### First, we run the example with the QBF solver
##### Next, we run the solver with one-hot SAT solver

######## TO CHECK:: Solving with QBF takes longer than solving with one-hot SAT
######## TO CHECK:: Realizability/Unrealizability solutions are consistent with those present in Table 1.

######## Timeout is set at 10s

#Example 0
$ timeout 10 python3 run.py -e ../poplbenchmarks/example0.csp -s 'false' -l 'FG(b=0)' -o ../poplbenchmarks/example0.sys -v 0 -qbf
$ timeout 10 python3 run.py -e ../poplbenchmarks/example0.csp -s 'false' -l 'FG(b=0)' -o ../poplbenchmarks/example0.sys -v 0 

#Example 1
$ timeout 10 python3 run.py -e ../poplbenchmarks/example1.csp -s 'false' -l 'FG(b=0)' -o ../poplbenchmarks/example1.sys -v 0 -qbf
$ timeout 10 python3 run.py -e ../poplbenchmarks/example1.csp -s 'false' -l 'FG(b=0)' -o ../poplbenchmarks/example1.sys -v 0

#Example 2
$ timeout 10 python3 run.py -e ../poplbenchmarks/example2.csp -s 'false' -l 'FG(b=0)' -o ../poplbenchmarks/example2.sys -v 0 -qbf
$ timeout 10 python3 run.py -e ../poplbenchmarks/example2.csp -s 'false' -l 'FG(b=0)' -o ../poplbenchmarks/example2.sys -v 0

#Example 3
$ timeout 10 python3 run.py -e ../poplbenchmarks/example3.csp -s 'false' -l 'FG(b=0)' -o ../poplbenchmarks/example3.sys -v 0 -qbf
$ timeout 10 python3 run.py -e ../poplbenchmarks/example3.csp -s 'false' -l 'FG(b=0)' -o ../poplbenchmarks/example3.sys -v 0

#Example 4
$ timeout 10 python3 run.py -e ../poplbenchmarks/example4.csp -s 'false' -l 'FG(b=0)' -o ../poplbenchmarks/example4.sys -v 0 -qbf
$ timeout 10 python3 run.py -e ../poplbenchmarks/example4.csp -s 'false' -l 'FG(b=0)' -o ../poplbenchmarks/example4.sys -v 0

#Example 5
$ timeout 10 python3 run.py -e ../poplbenchmarks/example5.csp -s 'false' -l 'FG(b=0)' -o ../poplbenchmarks/example5.sys -v 0 -qbf
$ timeout 10 python3 run.py -e ../poplbenchmarks/example5.csp -s 'false' -l 'FG(b=0)' -o ../poplbenchmarks/example5.sys -v 0

======================================================================================================================
======================================================================================================================
======================================================================================================================


### Case study 7.2.2. Thermostat case study. Results for comparison are in Table 2. (Timeout=1000s)

##### First, we run the example with the QBF solver
##### Next, we run the solver with one-hot SAT solver

######## TO CHECK:: Solving with QBF takes longer than solving with one-hot SAT
######## TO CHECK:: All return a controller with one-hot SAT, some timeout on QBF
######## Fun CHECK:: Characteristics of solutions obtained in each case as described in Section 7.2.2. May require inspection of the output.
######## Fun CHECK:: Execute the same input specification multiple times. May see different output solutions.
================================================================

# Thermostat with "AmbientTemp"

$ timeout 1000 python3 run.py -e ../poplbenchmarks/thermostatflat.csp -s 'false' -l 'GF(justRight=1)' -o ../poplbenchmarks/thermostatflat.sys -v 0 -qbf

$ timeout 1000 python3 run.py -e ../poplbenchmarks/thermostatflat.csp -s 'false' -l 'GF(justRight=1)' -o ../poplbenchmarks/thermostatflat.sys -v 0  

================================================================

# Thermostat with "AmbientTemp /\ Interact"

$ timeout 1000 python3 run.py -e ../poplbenchmarks/thermostatflat.csp -s 'false' -l 'GF(justRight=1) & GF(switchAcOn=1) & GF(switchHeatOn=1)' -o ../poplbenchmarks/thermostatflat.sys -v 0 -qbf

$ timeout 1000 python3 run.py -e ../poplbenchmarks/thermostatflat.csp -s 'false' -l 'GF(justRight=1) & GF(switchAcOn=1) & GF(switchHeatOn=1)' -o ../poplbenchmarks/thermostatflat.sys -v 0  

================================================================

# Thermostat with  "AmbientTemp /\ Interact /\ EnergyEfficient"

$ timeout 1000 python3 run.py -e ../poplbenchmarks/thermostatflat.csp -s 'false' -l 'GF(justRight=1) & GF(switchAcOn=1) & GF(switchHeatOn=1) & G((switchAcOn=1) -> (!((switchAcOff=0) U (switchHeatOn=1)))) & G((switchHeatOn=1) -> (!((switchHeatOff=0) U (switchAcOn=1))))' -o ../poplbenchmarks/thermostatflat.sys -v 0  -qbf

$ timeout 1000 python3 run.py -e ../poplbenchmarks/thermostatflat.csp -s 'false' -l 'GF(justRight=1) & GF(switchAcOn=1) & GF(switchHeatOn=1) & G((switchAcOn=1) -> (!((switchAcOff=0) U (switchHeatOn=1)))) & G((switchHeatOn=1) -> (!((switchHeatOff=0) U (switchAcOn=1))))' -o ../poplbenchmarks/thermostatflat.sys -v 0 

======================================================================================================================
======================================================================================================================
======================================================================================================================


### Case study 7.2.3. Arbiter case study. Results for comparison are in Table 3. (Timeout=1500s)

##### First, we run the example with the QBF solver
##### Next, we run the solver with one-hot SAT solver


######## TO CHECK:: Solving with QBF takes longer than solving with one-hot SAT
######## TO CHECK:: All return a controller with one-hot SAT, some timeout on QBF
######## Fun CHECK:: Characteristics of solutions obtained in each case as described in Section 7.2.2. May require inspection of the output.
######## Fun CHECK:: Execute the same input specification multiple times. May see different output solutions.
================================================================

# Arbiter for 2 processes: Mutex and Starvation freedom (Solution in Line 1016, not in Table 3)

$ timeout 1500 python3 run.py -e ../poplbenchmarks/arbiter2flat.csp -s 'false' -l 'G((request.0) -> F(grant.0)) & G((request.1) -> F(grant.1)) & !F(grant.0 & (!release.0 U grant.1)) & !F(grant.1 & (!release.1 U grant.0))' -o ../poplbenchmarks/arbiter2flat.sys -v 0 -qbf

$ timeout 1500 python3 run.py -e ../poplbenchmarks/arbiter2flat.csp -s 'false' -l 'G((request.0) -> F(grant.0)) & G((request.1) -> F(grant.1)) & !F(grant.0 & (!release.0 U grant.1)) & !F(grant.1 & (!release.1 U grant.0))' -o ../poplbenchmarks/arbiter2flat.sys -v 0 

================================================================
================================================================
================================================================

# Arbiter for 2 processes: Mutex and Starvation-freedom and SimulateStrongFairness 

$ timeout 1500 python3 run.py -e ../poplbenchmarks/arbiter2flat.csp -s 'false' -l 'GF(request.0) & G((request.0) -> F(grant.0)) & GF(request.1) & G((request.1) -> F(grant.1)) & !F(grant.0 & (!release.0 U grant.1)) & !F(grant.1 & (!release.1 U grant.0))' -o ../poplbenchmarks/arbiter2flat.sys -v 0 -qbf

$ timeout 1500 python3 run.py -e ../poplbenchmarks/arbiter2flat.csp -s 'false' -l 'GF(request.0) & G((request.0) -> F(grant.0)) & GF(request.1) & G((request.1) -> F(grant.1)) & !F(grant.0 & (!release.0 U grant.1)) & !F(grant.1 & (!release.1 U grant.0))' -o ../poplbenchmarks/arbiter2flat.sys -v 0 

================================================================
================================================================
================================================================

# Arbiter for 3 processes: Mutex and Starvation-freedom and SimulateStrongFairness 

$ timeout 1500 python3 run.py -e ../poplbenchmarks/arbiter3flat.csp -s 'false' -l 'GF(request.0) & G((request.0) -> F(grant.0)) & GF(request.1) & G((request.1) -> F(grant.1)) & GF(request.2) & G((request.2) -> F(grant.2)) & !F(grant.0 & (!release.0 U (grant.1 | grant.2))) & !F(grant.1 & (!release.1 U (grant.0 | grant.2))) & !F(grant.2 & (!release.2 U (grant.0 | grant.1)))' -o ../poplbenchmarks/arbiter3flat.sys -v 0 -qbf

$ timeout 1500 python3 run.py -e ../poplbenchmarks/arbiter3flat.csp -s 'false' -l 'GF(request.0) & G((request.0) -> F(grant.0)) & GF(request.1) & G((request.1) -> F(grant.1)) & GF(request.2) & G((request.2) -> F(grant.2)) & !F(grant.0 & (!release.0 U (grant.1 | grant.2))) & !F(grant.1 & (!release.1 U (grant.0 | grant.2))) & !F(grant.2 & (!release.2 U (grant.0 | grant.1)))' -o ../poplbenchmarks/arbiter3flat.sys -v 0 

================================================================
================================================================
================================================================
